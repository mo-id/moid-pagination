{"version":3,"file":"pagination.cjs.production.min.js","sources":["../src/utils/makeInclusiveNumberRange.ts","../src/react/usePagination.ts"],"sourcesContent":["/**\n * Crea un array di numeri che vanno dal parametro `from` al parametro `to` inclusi.\n * E.g. from: 2, to: 5 => [2, 3, 4, 5]\n */\nexport function makeInclusiveNumberRange(from: number, to: number): number[] {\n  const result: number[] = [];\n\n  for (let position = from; position <= to; position++) {\n    result.push(position);\n  }\n\n  return result;\n}\n","import { useCallback, useMemo } from \"react\";\n\nimport { Pagination } from \"../types\";\nimport { makeInclusiveNumberRange } from \"../utils\";\n\ninterface UsePagination {\n  previousPage: number;\n  nextPage: number;\n  getPathForPage(page: number): string;\n  isCurrentPage(page: number): boolean;\n  visiblePages: number[];\n}\n\nexport function usePagination(\n  pagination: Pagination,\n  windowSize: number,\n  currentUrl: string\n): UsePagination {\n  const previousPage = useMemo(\n    () => Math.max(1, pagination.page - 1),\n    [pagination]\n  );\n\n  const nextPage = useMemo(\n    () => Math.min(pagination.page + 1, pagination.totalPages),\n    [pagination]\n  );\n\n  const getPathForPage = useCallback(\n    (page: number) => {\n      const newUrl = new URL(currentUrl);\n      newUrl.searchParams.set(\"pagina\", String(page));\n      return `${newUrl.pathname}${newUrl.search}`;\n    },\n    [currentUrl]\n  );\n\n  const isCurrentPage = useCallback(\n    (page: number) => pagination.page === page,\n    [pagination]\n  );\n\n  const visiblePages = useMemo(() => {\n    const { page: currentPage, totalPages } = pagination;\n\n    // se il numero totale di pagine è più piccolo di quelle da visualizzare...\n    if (totalPages <= windowSize) {\n      // ...visualizziamo da pagina 1 a quella che viene prima tra\n      // totalPages e windowSize\n      const lastPage = Math.min(totalPages, windowSize);\n      return makeInclusiveNumberRange(1, lastPage);\n\n      // se invece non possiamo visualizzare TUTTE le pagine perché il loro numero\n      // totale di pagine + più grande della nostra finestra (7 pagine)...\n    } else {\n      // se la pagina corrente è tra le prime...\n      if (currentPage <= Math.ceil(windowSize / 2)) {\n        // ...visualizziamo da pagina 1 alla fine della finestra\n        return makeInclusiveNumberRange(1, windowSize);\n\n        // se la pagina corrente è tra le ultime...\n      } else if (currentPage >= totalPages - Math.floor(windowSize / 2)) {\n        // ...visualizziamo le pagine partendo dalla \"windowSizeultima\" fino\n        // all'ultima.\n        // E.g. totalPages = 10, windowSize = 7\n        //      visualizziamo da 4 a 10\n        //                       ^\n        //                       |\n        //                       +---- totalPages - windowSize + 1\n        return makeInclusiveNumberRange(\n          totalPages - windowSize + 1,\n          totalPages\n        );\n\n        // se la pagina corrente è nel bel mezzo di una finestra...\n      } else {\n        // ...visualizziamo metà finestra prima e metà finestra dopo\n        return makeInclusiveNumberRange(\n          currentPage - Math.floor(windowSize / 2),\n          currentPage + Math.floor(windowSize / 2)\n        );\n      }\n    }\n  }, [pagination]);\n\n  return {\n    previousPage,\n    nextPage,\n    getPathForPage,\n    isCurrentPage,\n    visiblePages,\n  };\n}\n"],"names":["makeInclusiveNumberRange","from","to","result","position","push","pagination","windowSize","currentUrl","previousPage","useMemo","Math","max","page","nextPage","min","totalPages","getPathForPage","useCallback","newUrl","URL","searchParams","set","String","pathname","search","isCurrentPage","visiblePages","currentPage","ceil","floor"],"mappings":"oGAIgBA,EAAyBC,EAAcC,WAC/CC,EAAmB,GAEhBC,EAAWH,EAAMG,GAAYF,EAAIE,IACxCD,EAAOE,KAAKD,UAGPD,iCCGPG,EACAC,EACAC,SAqEO,CACLC,aApEmBC,WACnB,kBAAMC,KAAKC,IAAI,EAAGN,EAAWO,KAAO,KACpC,CAACP,IAmEDQ,SAhEeJ,WACf,kBAAMC,KAAKI,IAAIT,EAAWO,KAAO,EAAGP,EAAWU,cAC/C,CAACV,IA+DDW,eA5DqBC,eACrB,SAACL,OACOM,EAAS,IAAIC,IAAIZ,UACvBW,EAAOE,aAAaC,IAAI,SAAUC,OAAOV,OAC/BM,EAAOK,SAAWL,EAAOM,SAErC,CAACjB,IAuDDkB,cApDoBR,eACpB,SAACL,UAAiBP,EAAWO,OAASA,IACtC,CAACP,IAmDDqB,aAhDmBjB,WAAQ,eACbkB,EAA4BtB,EAAlCO,KAAmBG,EAAeV,EAAfU,kBAGvBA,GAAcT,EAITP,EAAyB,EADfW,KAAKI,IAAIC,EAAYT,IAOlCqB,GAAejB,KAAKkB,KAAKtB,EAAa,GAEjCP,EAAyB,EAAGO,GAG1BqB,GAAeZ,EAAaL,KAAKmB,MAAMvB,EAAa,GAQtDP,EACLgB,EAAaT,EAAa,EAC1BS,GAMKhB,EACL4B,EAAcjB,KAAKmB,MAAMvB,EAAa,GACtCqB,EAAcjB,KAAKmB,MAAMvB,EAAa,MAI3C,CAACD"}