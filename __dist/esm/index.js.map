{"version":3,"file":"index.js","sources":["../../src/utils/makeInclusiveNumberRange.ts","../../src/react/usePagination.ts"],"sourcesContent":["/**\n * Crea un array di numeri che vanno dal parametro `from` al parametro `to` inclusi.\n * E.g. from: 2, to: 5 => [2, 3, 4, 5]\n */\nexport function makeInclusiveNumberRange(from: number, to: number): number[] {\n  const result: number[] = [];\n\n  for (let position = from; position <= to; position++) {\n    result.push(position);\n  }\n\n  return result;\n}\n","import { useCallback, useMemo } from \"react\";\n\nimport { Pagination } from \"../types\";\nimport { makeInclusiveNumberRange } from \"../utils\";\n\ninterface UsePagination {\n  previousPage: number;\n  nextPage: number;\n  getPathForPage(page: number): string;\n  isCurrentPage(page: number): boolean;\n  visiblePages: number[];\n}\n\nexport function usePagination(\n  pagination: Pagination,\n  windowSize: number,\n  currentUrl: string\n): UsePagination {\n  const previousPage = useMemo(\n    () => Math.max(1, pagination.page - 1),\n    [pagination]\n  );\n\n  const nextPage = useMemo(\n    () => Math.min(pagination.page + 1, pagination.totalPages),\n    [pagination]\n  );\n\n  const getPathForPage = useCallback(\n    (page: number) => {\n      const newUrl = new URL(currentUrl);\n      newUrl.searchParams.set(\"pagina\", String(page));\n      return `${newUrl.pathname}${newUrl.search}`;\n    },\n    [currentUrl]\n  );\n\n  const isCurrentPage = useCallback(\n    (page: number) => pagination.page === page,\n    [pagination]\n  );\n\n  const visiblePages = useMemo(() => {\n    const { page: currentPage, totalPages } = pagination;\n\n    // se il numero totale di pagine è più piccolo di quelle da visualizzare...\n    if (totalPages <= windowSize) {\n      // ...visualizziamo da pagina 1 a quella che viene prima tra\n      // totalPages e windowSize\n      const lastPage = Math.min(totalPages, windowSize);\n      return makeInclusiveNumberRange(1, lastPage);\n\n      // se invece non possiamo visualizzare TUTTE le pagine perché il loro numero\n      // totale di pagine + più grande della nostra finestra (7 pagine)...\n    } else {\n      // se la pagina corrente è tra le prime...\n      if (currentPage <= Math.ceil(windowSize / 2)) {\n        // ...visualizziamo da pagina 1 alla fine della finestra\n        return makeInclusiveNumberRange(1, windowSize);\n\n        // se la pagina corrente è tra le ultime...\n      } else if (currentPage >= totalPages - Math.floor(windowSize / 2)) {\n        // ...visualizziamo le pagine partendo dalla \"windowSizeultima\" fino\n        // all'ultima.\n        // E.g. totalPages = 10, windowSize = 7\n        //      visualizziamo da 4 a 10\n        //                       ^\n        //                       |\n        //                       +---- totalPages - windowSize + 1\n        return makeInclusiveNumberRange(\n          totalPages - windowSize + 1,\n          totalPages\n        );\n\n        // se la pagina corrente è nel bel mezzo di una finestra...\n      } else {\n        // ...visualizziamo metà finestra prima e metà finestra dopo\n        return makeInclusiveNumberRange(\n          currentPage - Math.floor(windowSize / 2),\n          currentPage + Math.floor(windowSize / 2)\n        );\n      }\n    }\n  }, [pagination]);\n\n  return {\n    previousPage,\n    nextPage,\n    getPathForPage,\n    isCurrentPage,\n    visiblePages,\n  };\n}\n"],"names":["makeInclusiveNumberRange","from","to","result","position","push","usePagination","pagination","windowSize","currentUrl","previousPage","useMemo","Math","max","page","nextPage","min","totalPages","getPathForPage","useCallback","newUrl","URL","searchParams","set","String","pathname","search","isCurrentPage","visiblePages","currentPage","lastPage","ceil","floor"],"mappings":";;AAAA;;;;SAIgBA,yBAAyBC,MAAcC;AACrD,MAAMC,MAAM,GAAa,EAAzB;;AAEA,OAAK,IAAIC,QAAQ,GAAGH,IAApB,EAA0BG,QAAQ,IAAIF,EAAtC,EAA0CE,QAAQ,EAAlD,EAAsD;AACpDD,IAAAA,MAAM,CAACE,IAAP,CAAYD,QAAZ;AACD;;AAED,SAAOD,MAAP;AACD;;SCCeG,cACdC,YACAC,YACAC;AAEA,MAAMC,YAAY,GAAGC,OAAO,CAC1B;AAAA,WAAMC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYN,UAAU,CAACO,IAAX,GAAkB,CAA9B,CAAN;AAAA,GAD0B,EAE1B,CAACP,UAAD,CAF0B,CAA5B;AAKA,MAAMQ,QAAQ,GAAGJ,OAAO,CACtB;AAAA,WAAMC,IAAI,CAACI,GAAL,CAAST,UAAU,CAACO,IAAX,GAAkB,CAA3B,EAA8BP,UAAU,CAACU,UAAzC,CAAN;AAAA,GADsB,EAEtB,CAACV,UAAD,CAFsB,CAAxB;AAKA,MAAMW,cAAc,GAAGC,WAAW,CAChC,UAACL,IAAD;AACE,QAAMM,MAAM,GAAG,IAAIC,GAAJ,CAAQZ,UAAR,CAAf;AACAW,IAAAA,MAAM,CAACE,YAAP,CAAoBC,GAApB,CAAwB,QAAxB,EAAkCC,MAAM,CAACV,IAAD,CAAxC;AACA,gBAAUM,MAAM,CAACK,QAAjB,GAA4BL,MAAM,CAACM,MAAnC;AACD,GAL+B,EAMhC,CAACjB,UAAD,CANgC,CAAlC;AASA,MAAMkB,aAAa,GAAGR,WAAW,CAC/B,UAACL,IAAD;AAAA,WAAkBP,UAAU,CAACO,IAAX,KAAoBA,IAAtC;AAAA,GAD+B,EAE/B,CAACP,UAAD,CAF+B,CAAjC;AAKA,MAAMqB,YAAY,GAAGjB,OAAO,CAAC;AAC3B,QAAckB,WAAd,GAA0CtB,UAA1C,CAAQO,IAAR;AAAA,QAA2BG,UAA3B,GAA0CV,UAA1C,CAA2BU,UAA3B;;AAGA,QAAIA,UAAU,IAAIT,UAAlB,EAA8B;AAC5B;AACA;AACA,UAAMsB,QAAQ,GAAGlB,IAAI,CAACI,GAAL,CAASC,UAAT,EAAqBT,UAArB,CAAjB;AACA,aAAOR,wBAAwB,CAAC,CAAD,EAAI8B,QAAJ,CAA/B,CAJ4B;AAO5B;AACD,KARD,MAQO;AACL;AACA,UAAID,WAAW,IAAIjB,IAAI,CAACmB,IAAL,CAAUvB,UAAU,GAAG,CAAvB,CAAnB,EAA8C;AAC5C;AACA,eAAOR,wBAAwB,CAAC,CAAD,EAAIQ,UAAJ,CAA/B,CAF4C;AAK7C,OALD,MAKO,IAAIqB,WAAW,IAAIZ,UAAU,GAAGL,IAAI,CAACoB,KAAL,CAAWxB,UAAU,GAAG,CAAxB,CAAhC,EAA4D;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAOR,wBAAwB,CAC7BiB,UAAU,GAAGT,UAAb,GAA0B,CADG,EAE7BS,UAF6B,CAA/B,CARiE;AAclE,OAdM,MAcA;AACL;AACA,eAAOjB,wBAAwB,CAC7B6B,WAAW,GAAGjB,IAAI,CAACoB,KAAL,CAAWxB,UAAU,GAAG,CAAxB,CADe,EAE7BqB,WAAW,GAAGjB,IAAI,CAACoB,KAAL,CAAWxB,UAAU,GAAG,CAAxB,CAFe,CAA/B;AAID;AACF;AACF,GAzC2B,EAyCzB,CAACD,UAAD,CAzCyB,CAA5B;AA2CA,SAAO;AACLG,IAAAA,YAAY,EAAZA,YADK;AAELK,IAAAA,QAAQ,EAARA,QAFK;AAGLG,IAAAA,cAAc,EAAdA,cAHK;AAILS,IAAAA,aAAa,EAAbA,aAJK;AAKLC,IAAAA,YAAY,EAAZA;AALK,GAAP;AAOD;;;;"}